model Campus {
  id        String    @id @default(uuid())
  name      String    @unique
  colleges  College[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model College {
  id     String @default(uuid())
  name   String
  rating Float?

  campus   Campus @relation(fields: [campusId], references: [id])
  campusId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([name, campusId])
}



//coursesApi
import { PrismaClient } from '@prisma/client'
import { NextApiRequest, NextApiResponse } from 'next'
const prisma = new PrismaClient()

const coursesApi = async (req: NextApiRequest, res: NextApiResponse) => {

    const methods = ['GET', 'POST', 'PUT', 'DELETE']
    if (!methods.includes(req.method)) {
        res.status(405).json({ message: 'Method not allowed' })
    }

    const getAllCourses = async () => await prisma.course.findMany(
        {
            include: {
                // _count: {
                //     select: {
                //         reviews: true,
                //         lecturers: true
                //     }
                // },
                // lecturers: true,
                // reviews: true,
                // campuses: true,
                // colleges: true
                CollegeCourse: true,
            }
        }
    )

    const addCourse = async (params: any) => {
        const { name, courseCode, colleges, lecturers, campus } = params
        const newCourse = await prisma.course.create({
            data: {
                name,
                courseCode,
                colleges: {
                    connect: colleges
                },
                lecturers: {
                    connect: lecturers
                },
                campuses: {
                    connect: campus
                },
            },
            include: {
                lecturers: true,
                reviews: true,
                campuses: true,
                colleges: true
            },
        })
        return newCourse
    }

    const updateCourse = async (params: any) => {

        const { name, courseCode, rating, lecturers, campus, reviews, colleges } = params
        const updatedCourse = await prisma.course.update({
            where: { name },
            data: {
                name,
                courseCode,
                rating,
                colleges: {
                    connect: colleges
                },
                lecturers: {
                    connect: lecturers
                },
                campuses: {
                    connect: campus
                },
                reviews: {
                    connect: reviews
                },
            },
            include: {
                lecturers: true,
                reviews: true
            }
        })
        return updatedCourse
    }


    const deleteCourse = async (params: any) => {

        const { name, root } = params
        if (root === "toor") {
            await prisma.course.deleteMany()
            return { message: 'All courses deleted' }
        }


        await prisma.course.delete({
            where: { name },
        })
        res.json({ message: 'Course deleted' })
    }

    switch (req.method) {
        case 'GET':
            try {
                const allCourses = await getAllCourses()
                res.json(allCourses)
            } catch (error) {
                res.status(500).json({ message: error })
            }

            break
        case 'POST':
            try {
                const newCourse = await addCourse(req.body)
                res.json(newCourse)
            }
            catch (error) {
                res.status(500).json({ message: error })
            }

            break
        case 'PUT':
            try {
                const updatedCourse = await updateCourse(req.body)
                res.json(updatedCourse)
            }
            catch (error) {
                res.status(500).json({ message: error })
            }
            break
        case 'DELETE':
            try {
                const deletedCourse = await deleteCourse(req.body)
                res.json(deletedCourse)
            }
            catch (error) {
                res.status(500).json({ message: error })
            }

            break
    }

    await prisma.$disconnect()
}

export default coursesApi