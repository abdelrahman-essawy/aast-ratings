// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If you use Neon for development environment, create a separate Neon project for Prisma shadow database
  // https://neon.tech/docs/quickstart/prisma/#step-2-using-neon-for-development-with-prisma

  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Campus {
  id     String @id @unique @default(cuid())
  name   String @unique
  rating Float  @default(0)

  hasColleges College[]
  hasReviews  Review[]
}

model College {
  id     String @id @unique @default(cuid())
  name   String
  rating Float  @default(0)

  inCampuses   Campus[]
  hasLecturers Lecturer[]
  hasCourses   Course[]
  hasReviews   Review[]
}

model Lecturer {
  id                   String @id @unique @default(cuid())
  name                 String
  rating               Float  @default(0)
  personalSideRating   Int    @default(0)
  scientificSideRating Int    @default(0)
  recommendationRating Int    @default(0)

  workInColleges College[]
  teachCourses   Course[]
  hasReview      Review[]

  @@index([name], name: "name")
}

model Course {
  id         String  @id @unique @default(cuid())
  name       String  @unique
  courseCode String? @unique
  rating     Float   @default(0)

  taughtByLecturers   Lecturer[]
  availableInColleges College[]
  hasReview           Review[]
}

model Review {
  id                   String  @id @unique @default(cuid())
  rating               Float   @default(0)
  personalSideRating   Int?    @default(0)
  scientificSideRating Int?    @default(0)
  recommendationRating Int?    @default(0)
  comment              String?

  campusesReviews  Campus?   @relation(fields: [campusId], references: [id])
  collegesReviews  College?  @relation(fields: [collegeId], references: [id])
  lecturersReviews Lecturer? @relation(fields: [lecturerId], references: [id])
  coursesReviews   Course?   @relation(fields: [courseId], references: [id])
  campusId         String?
  collegeId        String?
  lecturerId       String?
  courseId         String?
}
