// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If you use Neon for development environment, create a separate Neon project for Prisma shadow database
  // https://neon.tech/docs/quickstart/prisma/#step-2-using-neon-for-development-with-prisma

  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Campus {
  id     String @id @unique
  name   String @unique
  rating Float  @default(0)

  hasReviews    Review[]
  hasColleges   College[]
  hasLecturers  Lecturer[]
  CollegeCampus CollegeCampus[]
}

model College {
  id     String @id @unique
  name   String
  rating Float  @default(0)

  inCampus      Campus          @relation(fields: [campusId], references: [id])
  campusId      String
  hasLecturers  Lecturer[]
  hasCourses    Course[]
  hasReviews    Review[]
  CollegeCampus CollegeCampus[]

  @@unique([name, campusId])
}

model CollegeCampus {
  collegeId String
  campusId  String
  college   College @relation(fields: [collegeId], references: [id])
  campus    Campus  @relation(fields: [campusId], references: [id])

  @@id([collegeId, campusId])
}

model Lecturer {
  id                   String        @id @unique
  name                 String
  rating               Float         @default(0)
  personalSideRating   Int           @default(0)
  scientificSideRating Int           @default(0)
  recommendationRating Int           @default(0)
  role                 String
  amountOfReviews      Int           @default(0)
  achievements         Achievement[]
  contacts             Contact[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workInColleges College[]
  workInCampus   Campus?   @relation(fields: [campusId], references: [id])
  teachCourses   Course[]
  hasReviews     Review[]
  campusId       String?
}

model Course {
  id         String  @id @unique
  name       String  @unique
  courseCode String? @unique
  rating     Float   @default(0)

  taughtByLecturers   Lecturer[]
  availableInColleges College[]
  hasReviews          Review[]
}

model Review {
  id                   String    @id @unique @default(cuid())
  avatar               String?
  author               String?
  rating               Float     @default(0)
  personalSideRating   Int?      @default(0)
  scientificSideRating Int?      @default(0)
  recommendationRating Int?      @default(0)
  comment              String?
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  score                Int?      @default(0)

  campusesReviews  Campus?   @relation(fields: [campusId], references: [id])
  collegesReviews  College?  @relation(fields: [collegeId], references: [id])
  lecturersReviews Lecturer? @relation(fields: [lecturerId], references: [id])
  coursesReviews   Course?   @relation(fields: [courseId], references: [id])
  campusId         String?
  collegeId        String?
  lecturerId       String?
  courseId         String?
}

model Achievement {
  id          String    @id @unique @default(cuid())
  name        String
  code        Int
  description String?
  gotAt       DateTime  @default(now())
  lostAt      DateTime?
  Lecturer    Lecturer? @relation(fields: [lecturerId], references: [id])
  lecturerId  String?
}

model Contact {
  id         String    @id @unique @default(cuid())
  name       String
  value      String
  createdAt  DateTime? @default(now())
  Lecturer   Lecturer? @relation(fields: [lecturerId], references: [id])
  lecturerId String?
}
