// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If you use Neon for development environment, create a separate Neon project for Prisma shadow database
  // https://neon.tech/docs/quickstart/prisma/#step-2-using-neon-for-development-with-prisma

  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Campus {
  id          String    @id @unique @default(cuid())
  name        String    @unique
  hasColleges College[]
  hasReviews  Review[]
}

model College {
  id           String     @id @unique @default(cuid())
  name         String
  inCampuses   Campus[]
  hasLecturers Lecturer[]
  hasCourses   Course[]
  hasReviews   Review[]
}

model Lecturer {
  id                   String    @id @unique @default(cuid())
  name                 String
  workInColleges       College[]
  teachCourses         Course[]
  personalSideRating   Int?
  recommendationRating Int?
  scientificSideRating Int?
  hasReview            Review[]
}

model Course {
  id                  String     @id @unique @default(cuid())
  name                String     @unique
  courseCode          String?    @unique
  taughtByLecturers   Lecturer[]
  availableInColleges College[]
  hasReview           Review[]
}

model Review {
  id               String    @id @unique @default(cuid())
  rating           Float
  comment          String?
  campusesReviews  Campus?   @relation(fields: [campusId], references: [id])
  collegesReviews  College?  @relation(fields: [collegeId], references: [id])
  lecturersReviews Lecturer? @relation(fields: [lecturerId], references: [id])
  coursesReviews   Course?   @relation(fields: [courseId], references: [id])
  campusId         String?
  collegeId        String?
  lecturerId       String?
  courseId         String?
}
